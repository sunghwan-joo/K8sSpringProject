name: Deploy to ArgoCD with ACR docker Image

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prd
      TagVersion:
        description: 'Docker image tag'
        required: true
        default: '1.0.0'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.26.0'

      - name: Install kubelogin
        run: |
          sudo az aks install-cli
          sudo curl -L https://github.com/Azure/kubelogin/releases/download/v0.0.25/kubelogin-linux-amd64.zip -o kubelogin.zip
          sudo unzip kubelogin.zip -d /usr/local/bin

      - name: Install Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin

      - name: Log in to Azure CLI
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          echo "$AZURE_CREDENTIALS" > azure_credentials.json
          az login --service-principal \
            --username $(jq -r .clientId azure_credentials.json) \
            --password $(jq -r .clientSecret azure_credentials.json) \
            --tenant $(jq -r .tenantId azure_credentials.json)
          az account set --subscription $(jq -r .subscriptionId azure_credentials.json)
        shell: bash

      - name: Get AKS credentials
        run: | 
          az aks get-credentials --resource-group rg-idp --name aks-idp-demo --overwrite-existing

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Login to ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_IP }} --username ${{ secrets.ARGOCD_ID }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure

      - name: Update image tag in Kustomize
        run: |
          cd manifests/overlays/${{ github.event.inputs.environment }}
          kustomize edit set image ktdsacr.azurecr.io/samplejava-${{ github.event.inputs.environment }}:${{ github.event.inputs.TagVersion }}

      - name: Create ArgoCD secret for ACR
        run: |
          if ! kubectl get secret acr-credentials --namespace ${{ vars.K8S_NAMESPACE }}; then
            kubectl create secret docker-registry acr-credentials \
              --docker-server ${{ vars.ACR_NAME }}.azurecr.io \
              --docker-username ${{ vars.DOCKER_USERNAME }} \
              --docker-password ${{ secrets.DOCKER_PASSWORD }} \
              --namespace ${{ vars.K8S_NAMESPACE }}
          else
            echo "Secret acr-credentials already exists, skipping creation."
          fi

      - name: Check if ArgoCD app exists
        id: check_app
        run: |
          if argocd app get ${{ vars.ARGOCD_APP_NAME }}; then
            echo "app_exists=true" >> $GITHUB_ENV
          else
            echo "app_exists=false" >> $GITHUB_ENV
          fi

      - name: Create or Update ArgoCD Application
        run: |
          if [ "${{ env.app_exists }}" = "true" ]; then
            argocd app set ${{ vars.ARGOCD_APP_NAME }} \
              --repo https://github.com/${{ github.repository }} \
              --path manifests/overlays/${{ github.event.inputs.environment }} \
              --sync-policy automated
              --dest-namespace ${{ vars.K8S_NAMESPACE }}
          else
            argocd app create ${{ vars.ARGOCD_APP_NAME }} \
              --repo https://github.com/${{ github.repository }} \
              --path manifests/overlays/${{ github.event.inputs.environment }} \
              --dest-server https://kubernetes.default.svc \
              --dest-namespace ${{ vars.K8S_NAMESPACE }}  \
              --sync-policy automated
          fi

      - name: ArgoCD Sync Application
        run: |
          argocd app sync ${{ vars.ARGOCD_APP_NAME }}
